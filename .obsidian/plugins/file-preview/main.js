/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FilePreview
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var FilePreview = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.previewContentsEl = [];
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new FilePreviewSettingTab(this.app, this));
    await this.initialize();
    this.addRibbonIcon("refresh-cw", "Refresh preview contents", async () => {
      this.refreshPreviewContents();
    });
    this.addRibbonIcon("trash", "Delete preview contents", async () => {
      this.deletePreviewContents();
    });
    this.ttl = 5;
    (0, import_obsidian.addIcon)("captions", '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-captions"><rect width="18" height="14" x="3" y="5" rx="2" ry="2"/><path d="M7 15h4M15 15h2M7 11h2M13 11h4"/></svg>');
    (0, import_obsidian.addIcon)("captions-off", '<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-captions-off"><path d="M10.5 5H19a2 2 0 0 1 2 2v8.5"/><path d="M17 11h-.5"/><path d="M19 19H5a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2"/><path d="m2 2 20 20"/><path d="M7 11h4"/><path d="M7 15h2.5"/></svg>');
    await this.saveSettings();
  }
  onunload() {
    this.showpreviewBtn.remove();
    this.deletePreviewContents();
    this.saveSettings();
  }
  async initialize() {
    this.app.workspace.onLayoutReady(async () => {
      try {
        this.fileExplorerView = await this.getFileExplorerView();
        this.fileNavEl = this.fileExplorerView.containerEl;
        this.initImagePaths();
        this.createShowPreviewButton(this.fileNavEl.querySelector(".nav-header > .nav-buttons-container"));
        if (this.settings.showpreview) {
          await this.refreshPreviewContents();
        }
      } catch (err) {
        console.log(err);
        if (this.ttl <= 0) {
          return;
        }
        this.ttl -= 1;
        setTimeout(() => {
          this.initialize();
        }, 1e3);
      }
    });
  }
  createShowPreviewButton(fileNavHeader) {
    if (this.showpreviewBtn) {
      return;
    }
    this.showpreviewBtn = fileNavHeader.createDiv({ cls: "clickable-icon nav-action-button show-preview-button", attr: { "aria-label": "Show/Hide preview contents" } });
    if (this.settings.ispreview) {
      (0, import_obsidian.setIcon)(this.showpreviewBtn, "captions-off");
    } else {
      (0, import_obsidian.setIcon)(this.showpreviewBtn, "captions");
    }
    this.registerDomEvent(this.showpreviewBtn, "click", async () => {
      if (this.settings.ispreview) {
        this.deletePreviewContents();
        (0, import_obsidian.setIcon)(this.showpreviewBtn, "captions-off");
      } else {
        await this.displayPreviewContents();
        (0, import_obsidian.setIcon)(this.showpreviewBtn, "captions");
      }
    });
    this.saveSettings();
  }
  async displayPreviewContents() {
    this.fileNavEl.classList.add("file-preview-nav");
    const fileItems = this.fileExplorerView.fileItems;
    if (this.settings.showImg) {
      for (const path in fileItems) {
        const item = fileItems[path];
        if (path === "/" || !(item.file instanceof import_obsidian.TFile) || item.file.extension !== "md") {
          continue;
        }
        await this.app.vault.cachedRead(item.file).then((contents) => {
          const formattedContents = this.formatContents(contents.trim());
          let imgpath = this.getFirstImgPath(contents);
          if (formattedContents) {
            item.selfEl.classList.add("file-preview-nav-file-title");
            this.previewContentsEl.push(item.selfEl.createEl("div", {
              text: formattedContents,
              attr: {
                class: "tree-item-inner nav-file-details",
                style: `-webkit-line-clamp: ${this.settings.lineClamp}; text-indent: ${this.settings.indents}em;`
              }
            }));
            if (imgpath) {
              item.el.classList.add("file-preview-show-img");
              const fileimg = item.el.createEl("div", {
                attr: {
                  class: "tree-item-inner nav-file-img"
                }
              });
              if (!imgpath.startsWith("http")) {
                const absolutePath = this.imagePaths.find((path2) => path2.endsWith(imgpath)) || imgpath;
                imgpath = this.app.vault.adapter.getResourcePath((0, import_obsidian.normalizePath)(absolutePath));
              }
              fileimg.createEl("div", {
                attr: {
                  class: "preview-img",
                  style: `background-image: url(${imgpath})`
                }
              });
              this.previewContentsEl.push(fileimg);
            }
          }
        });
      }
    } else {
      for (const path in fileItems) {
        const item = fileItems[path];
        if (path === "/" || !(item.file instanceof import_obsidian.TFile) || item.file.extension !== "md") {
          continue;
        }
        await this.app.vault.cachedRead(item.file).then((contents) => {
          const formattedContents = this.formatContents(contents.trim());
          if (formattedContents) {
            item.selfEl.classList.add("file-preview-nav-file-title");
            this.previewContentsEl.push(item.selfEl.createEl("div", {
              text: formattedContents,
              attr: {
                class: "tree-item-inner nav-file-details",
                style: `-webkit-line-clamp: ${this.settings.lineClamp}; text-indent: ${this.settings.indents}em;`
              }
            }));
          }
        });
      }
    }
    this.settings.ispreview = true;
  }
  async getFileExplorerView() {
    return new Promise((resolve, reject) => {
      let foundLeaf = null;
      const leafs = this.app.workspace.getLeavesOfType("file-explorer");
      if (leafs.length === 0) {
        reject(Error("Could not find file explorer view."));
      } else {
        foundLeaf = leafs[0];
        resolve(foundLeaf.view);
      }
      if (!foundLeaf) {
        reject(Error("Could not find file explorer view."));
      }
    });
  }
  async deletePreviewContents() {
    this.previewContentsEl.forEach((el) => {
      el.remove();
    });
    this.previewContentsEl = [];
    this.settings.ispreview = false;
  }
  async refreshPreviewContents() {
    if (this.settings.ispreview) {
      this.deletePreviewContents();
    }
    this.displayPreviewContents();
  }
  formatContents(contents) {
    let formatContents = contents;
    if (contents.startsWith("---") && this.settings.format.frontmatter) {
      formatContents = contents.replace(/---[\s\S]*?---/, "");
    }
    if (this.settings.format.bolditalic) {
      formatContents = formatContents.replace(/(\*\*|__)(.*?)\1/g, "$2");
      formatContents = formatContents.replace(/(\*|_)(.*?)\1/g, "$2");
    }
    if (this.settings.format.highlight) {
      formatContents = formatContents.replace(/===(.*?)===/g, "$1");
    }
    if (this.settings.format.codeblock) {
      formatContents = formatContents.replace(/`{5}[\s\S]*?`{5}/g, "");
      formatContents = formatContents.replace(/`{4}[\s\S]*?`{4}/g, "");
      formatContents = formatContents.replace(/`{3}[\s\S]*?`{3}/g, "");
    }
    if (this.settings.format.quote) {
      formatContents = formatContents.replace(/(^>.*\n*)+/g, "");
    }
    if (this.settings.format.blankline) {
      formatContents = formatContents.replace(/^\s*\n/g, "");
    }
    formatContents = formatContents.replace(/#+/g, "");
    formatContents = formatContents.replace(/!\[.*?\]\(.*?\)/g, "");
    formatContents = formatContents.replace(/\[\[.*?\]\]/g, "");
    formatContents = formatContents.replace(/\[.*?\]\(.*?\)/g, "");
    return formatContents.slice(0, parseInt(this.settings.previewcontentslength)).trim();
  }
  getFirstImgPath(contents) {
    const imgReg = /!\[\[(.*?)\](?!\|bb\]\])|!\[(.*?)\]\((.*?)\)/;
    const ImgMatch = contents.match(imgReg);
    if (ImgMatch) {
      const imgPath = ImgMatch[1] || ImgMatch[3];
      if (imgPath.includes("|")) {
        return imgPath.split("|")[0];
      }
      return imgPath;
    }
    return "";
  }
  async initImagePaths() {
    const allpaths = this.app.vault.getFiles().map((file) => file.path);
    const imgpaths = allpaths.filter((path) => this.pathIsImg(path));
    this.imagePaths = imgpaths;
  }
  pathIsImg(path) {
    return path.endsWith(".png") || path.endsWith(".jpg") || path.endsWith(".jpeg") || path.endsWith(".gif") || path.endsWith(".webp");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var DEFAULT_SETTINGS = {
  showpreview: true,
  lineClamp: 2,
  indents: 0,
  previewcontentslength: "50",
  ispreview: false,
  format: {
    frontmatter: true,
    bolditalic: true,
    highlight: true,
    codeblock: true,
    quote: true,
    blankline: true,
    title: true
  },
  showImg: true
};
var FilePreviewSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Show preview contents").setDesc("Show preview contents in the file explorer.").addToggle((toggle) => toggle.setValue(this.plugin.settings.showpreview).onChange(async (value) => {
      this.plugin.settings.showpreview = value;
      if (value) {
        await this.plugin.initialize();
      } else {
        await this.plugin.deletePreviewContents();
      }
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Show image").setDesc("Show image in the preview contents from file content.").addToggle((toggle) => toggle.setValue(this.plugin.settings.showImg).onChange(async (value) => {
      this.plugin.settings.showImg = value;
      await this.plugin.refreshPreviewContents();
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Length of the preview contents.").setDesc("default: 50").addText((text) => text.setPlaceholder("50").setValue(this.plugin.settings.previewcontentslength).onChange(async (value) => {
      this.plugin.settings.previewcontentslength = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Line clamp").setDesc("The number of lines to show in the preview contents.(1 - 10, default: 2).").addSlider(
      (slider) => slider.setLimits(1, 10, 1).setValue(this.plugin.settings.lineClamp).onChange(async (value) => {
        this.plugin.settings.lineClamp = value;
        await this.plugin.refreshPreviewContents();
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Indents of the preview contents").setDesc("The indents of the preview contents.").addSlider((slider) => slider.setLimits(0, 10, 1).setValue(this.plugin.settings.indents).onChange(async (value) => {
      this.plugin.settings.indents = value;
      await this.plugin.refreshPreviewContents();
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Format preview contents").setHeading();
    new import_obsidian.Setting(containerEl).setName("Remove frontmatter").setDesc("Remove frontmatter of the file.").addToggle((toggle) => toggle.setValue(this.plugin.settings.format.frontmatter).onChange(async (value) => {
      this.plugin.settings.format.frontmatter = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove bold and italic symbols").setDesc("Remove bold and italic symbols of the file.").addToggle((toggle) => toggle.setValue(this.plugin.settings.format.bolditalic).onChange(async (value) => {
      this.plugin.settings.format.bolditalic = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove highlight symbols").setDesc("Remove highlight symbols of the file.").addToggle((toggle) => toggle.setValue(this.plugin.settings.format.highlight).onChange(async (value) => {
      this.plugin.settings.format.highlight = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove code block").setDesc("Remove code block of the file.").addToggle((toggle) => toggle.setValue(this.plugin.settings.format.codeblock).onChange(async (value) => {
      this.plugin.settings.format.codeblock = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove quote").setDesc("Remove quote of the file.").addToggle((toggle) => toggle.setValue(this.plugin.settings.format.quote).onChange(async (value) => {
      this.plugin.settings.format.quote = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove blank line").setDesc("Remove blank line of the file.").addToggle((toggle) => toggle.setValue(this.plugin.settings.format.blankline).onChange(async (value) => {
      this.plugin.settings.format.blankline = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Remove title symbol").setDesc("Remove title symbol of the file.").addToggle((toggle) => toggle.setValue(this.plugin.settings.format.title).onChange(async (value) => {
      this.plugin.settings.format.title = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
