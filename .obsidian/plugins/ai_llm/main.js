/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => llmPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  ollama_endpoint: "http://localhost:11434/api/generate",
  model: "tinyllama"
};
var llmPlugin = class extends import_obsidian.Plugin {
  async onload() {
    const settings = await this.loadSettings();
    async function getResponsefromLLM(passedQuery) {
      const llmSettings = settings;
      const llmModel = llmSettings.model;
      const endpoint = `${llmSettings.ollama_endpoint}`;
      const inputString = `${passedQuery}`;
      const bodyOb = {
        prompt: inputString,
        model: llmModel,
        stream: true
      };
      try {
        return await (0, import_obsidian.requestUrl)({
          url: endpoint,
          method: "POST",
          body: JSON.stringify(bodyOb)
        }).then((data) => {
          const res = data.text;
          if (res) {
            let data_list = res;
            let responses = [];
            data_list.split("}").forEach((obj) => {
              if (obj.trim()) {
                obj = obj + "}";
                let response2 = JSON.parse(obj)["response"];
                responses.push(response2);
              }
            });
            let response_line = responses.join("");
            let bot_response = `

${response_line}

`;
            let response = bot_response.trim();
            new import_obsidian.Notice("Success !");
            return String(response);
          }
        });
      } catch (error) {
        new import_obsidian.Notice(`Error: ${error}!`);
        return String(error);
      }
    }
    this.addCommand({
      id: "send-request-to-llm",
      name: "Ask Llm",
      editorCallback: (editor) => {
        const userRequest = editor.getSelection();
        new import_obsidian.Notice("Trying to send a request to LLM !\n\nPatience !");
        getResponsefromLLM(userRequest).then((data) => {
          editor.replaceSelection(String(data));
        });
      }
    });
    this.addCommand({
      id: "continue-my-story",
      name: "Continue my story and make it better",
      editorCallback: (editor) => {
        const userRequest = editor.getSelection();
        getResponsefromLLM(
          `Continue my story and make it better: ${userRequest}`
        ).then((data) => {
          editor.replaceSelection(String(data));
        });
      }
    });
    this.addCommand({
      id: "make-a-story",
      name: "Make a story from my text",
      editorCallback: (editor) => {
        const userRequest = editor.getSelection();
        getResponsefromLLM(
          `Make a story from my text: ${userRequest}`
        ).then((data) => {
          editor.replaceSelection(String(data));
        });
      }
    });
    this.addCommand({
      id: "summarize-my-text",
      name: "Summarize my text ",
      editorCallback: (editor) => {
        const userRequest = editor.getSelection();
        getResponsefromLLM(
          `Make a summary from provided text: ${userRequest}`
        ).then((data) => {
          editor.replaceSelection(String(data));
        });
      }
    });
    this.addSettingTab(new llmSettingsTab(this.app, this, settings));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
    return this.settings;
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var llmSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin, settings) {
    super(app, plugin);
    this.plugin = plugin;
    this.settings = settings;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian.Setting(containerEl).setName("Ollama endpoint").setDesc("Ollama API URL").addText(
      (text) => text.setPlaceholder("Enter your endpoint url").setValue(this.plugin.settings.ollama_endpoint).onChange(async (value) => {
        this.plugin.settings.ollama_endpoint = value;
        await this.plugin.saveSettings();
      })
    );
    if (this.settings.model !== null && this.settings.model !== "") {
      new import_obsidian.Setting(containerEl).setName("LLM model").setDesc(
        "Choose a model, remember that you should download ollama and needed models first !"
      ).addDropdown((dropdown) => {
        dropdown.addOption("tinyllama", "tinyllama").addOption("phi", "phi").addOption("orca-mini", "orca-mini").addOption("tinydolphin", "tinydolphin").addOption("samantha-mistral", "samantha-mistral").addOption("llama2", "llama2").addOption("medllama2", "medllama2").setValue(this.settings.model).onChange(async (value) => {
          this.plugin.settings.model = value;
          await this.plugin.saveSettings();
        });
      });
    } else {
      new import_obsidian.Setting(containerEl).setName("LLM model").setDesc(
        "Choose a model, remember that you should download ollama and needed models first !"
      ).addDropdown((dropdown) => {
        dropdown.addOption("tinyllama", "tinyllama").addOption("phi", "phi").addOption("orca-mini", "orca-mini").addOption("tinydolphin", "tinydolphin").addOption("samantha-mistral", "samantha-mistral").addOption("llama2", "llama2").addOption("medllama2", "medllama2").setValue("tinyllama").onChange(async (value) => {
          this.plugin.settings.model = value;
          await this.plugin.saveSettings();
        });
      });
    }
  }
};
